//file:noinspection DependencyNotationArgument
import org.jetbrains.gradle.ext.Gradle

plugins {
    id 'java'
    id 'java-library'
    id 'eclipse'
    id 'org.jetbrains.gradle.plugin.idea-ext' version '1.1.7'
    id 'com.gtnewhorizons.retrofuturagradle' version '1.3.+'
}

group = project.maven_group
archivesBaseName = project.archives_base_name
version = project.mod_version

java {
    toolchain {
        vendor.set(JvmVendorSpec.AZUL)
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}

tasks.withType(JavaCompile).configureEach {
    if (it.name in ['compileMcLauncherJava', 'compilePatchedMcJava']) {
        return
    }

    options.encoding 'UTF-8'

    sourceCompatibility = '17'
    targetCompatibility = '8'
    options.release.set(Integer.parseInt('8'))

    javaCompiler.set(javaToolchains.compilerFor {
        vendor.set(JvmVendorSpec.AZUL)
        languageVersion.set(JavaLanguageVersion.of('17'))
    })
}

configurations {
    embed
    implementation.extendsFrom(embed)
}

minecraft {
    mcVersion = project.mc_version
    def args = [
            "-ea:${project.group}",
            "-Dfml.coreMods.load=${coremod_plugin_class_name}"
    ]
    extraRunJvmArguments.addAll(args)

    useDependencyAccessTransformers = true

    injectedTags.put('VERSION', project.version)
}

tasks.injectTags.configure {
    outputClassName.set('micdoodle8.mods.galacticraft.core.Tags')
}

repositories {
    maven {
        // JEI
        name 'BlameJared Maven'
        url 'https://maven.blamejared.com'
    }
    maven {
        // Buildcraft
        name 'Buildcraft Maven'
        url 'https://mod-buildcraft.com/maven'
    }
    maven {
        name 'Curse Maven'
        url 'https://www.cursemaven.com'
        content {
            includeGroup 'curse.maven'
        }
    }
}

dependencies {
    implementation rfg.deobf('curse.maven:mekanism-268560:2835175') // Mekanism 9.8.3.390
    implementation rfg.deobf('curse.maven:industrial-craft-242638:3838713') // IC2exp 2.8.222-ex112
    implementation 'com.mod-buildcraft:buildcraft-api:7.99.24.8'
    implementation 'mezz.jei:jei_1.12.2:4.16.1.302'

    compileOnlyApi rfg.deobf('curse.maven:biomes-o-plenty-220318:3558882') // Biomes O' Plenty 7.0.1.2445
    compileOnlyApi rfg.deobf('curse.maven:ae2-extended-life-570458:4553942') // AE2UEL 0.55.14
    compileOnlyApi rfg.deobf('curse.maven:redstone-flux-270789:2920436') // Redstone Flux 2.1.1.1
    compileOnlyApi rfg.deobf('curse.maven:actually-additions-228404:3117927') // Actually Additions r152
    compileOnlyApi rfg.deobf('curse.maven:playerapi-449521:3212872') // PlayerAPI 1.1
    compileOnlyApi rfg.deobf('curse.maven:journeymap-32274:2916002') // JourneyMap 5.7.1

    annotationProcessor 'org.projectlombok:lombok:1.18.24'
    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'com.github.bsideup.jabel:jabel-javac-plugin:1.0.0'
    compileOnly('com.github.bsideup.jabel:jabel-javac-plugin:1.0.0') {
        transitive = false
    }
    annotationProcessor 'net.java.dev.jna:jna-platform:5.13.0'
    patchedMinecraft 'me.eigenraven.java8unsupported:java-8-unsupported-shim:1.0.0'
}

// noinspection ConfigurationAvoidance
for (File at : sourceSets.getByName('main').resources.files) {
    if (at.name.toLowerCase().endsWith('_at.cfg')) {
        tasks.deobfuscateMergedJarToSrg.accessTransformerFiles.from at
        tasks.srgifyBinpatchedJar.accessTransformerFiles.from at
    }
}

processResources {
    inputs.property 'version', project.mod_version
    inputs.property 'mcversion', project.minecraft.version
    filesMatching(['mcmod.info', 'pack.mcmeta']) { fcd ->
        fcd.expand(
                'version': project.version,
                'mcversion': project.minecraft.version
        )
    }
    rename '(.+_at.cfg)', 'META_INF/$1'
}

jar {
    manifest {
        def attribute_map = [:]
        attribute_map['FMLCorePlugin'] = coremod_plugin_class_name
        attribute_map['FMLCorePluginContainsFMLMod'] = true
        attribute_map['ForceLoadAsMod'] = project.gradle.startParameter.taskNames[0] == 'build'
        attribute_map['FMLAT'] = archives_base_name + '_at.cfg'
        attributes(attribute_map)
    }

    from provider {
        configurations.embed.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
}

idea {
    module {
        inheritOutputDirs true
        downloadJavadoc true
        downloadSources true
    }
    project {
        settings {
            runConfigurations {
                '1. Run Client'(Gradle) {
                    taskNames = ['runClient']
                }
                '2. Run Server'(Gradle) {
                    taskNames = ['runServer']
                }
                '3. Run Obfuscated Client'(Gradle) {
                    taskNames = ['runObfClient']
                }
                '4. Run Obfuscated Server'(Gradle) {
                    taskNames = ['runObfServer']
                }
            }
            compiler.javac {
                afterEvaluate {
                    javacAdditionalOptions = '-encoding utf8'
                    moduleJavacAdditionalOptions = [
                            (project.name + '.main'): tasks.compileJava.options.compilerArgs.collect {
                                '"' + it + '"'
                            }.join(' ')
                    ]
                }
            }
        }
    }
}

tasks.named('processIdeaSettings').configure {
    dependsOn('injectTags')
}
